import base64
import httpx
from datetime import timedelta
from sqlalchemy.orm import Session
from typing import Dict, Any, Optional
from google.oauth2 import id_token
from google.auth.transport import requests as google_requests
from jose import jwt
import json
from app.core.config import settings
from app.core.security import create_access_token
from app.crud.user import get_user_by_email, create_or_update_google_user
# app/services/auth_service.py
async def get_google_token(code: str) -> Optional[Dict[str, Any]]:
    print(f"üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google: {code}")
    print(f"üîπ –î–ª–∏–Ω–∞ –∫–æ–¥–∞: {len(code)}")
    print(f"üîπ Redirect URI: {settings.GOOGLE_REDIRECT_URI}")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —ç—Ç–æ–º
    async with httpx.AsyncClient(timeout=30.0) as client:
        token_url = "https://oauth2.googleapis.com/token"
        data = {
            "client_id": settings.GOOGLE_CLIENT_ID,
            "client_secret": settings.GOOGLE_CLIENT_SECRET,
            "code": code,
            "grant_type": "authorization_code",
            "redirect_uri": settings.GOOGLE_REDIRECT_URI
        }
        
        print(f"üîπ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ token: {data}")
        
        try:
            response = await client.post(token_url, data=data)
            print(f"üîπ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            print(f"üîπ –û—Ç–≤–µ—Ç Google OAuth: {response.text}")
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ Google OAuth: {response.text}")
                return None
            
            response_json = response.json()
            return response_json
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
        


async def get_google_user_info(token: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Google"""
    print(f"üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º Access Token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {token}")

    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω!")
        return None

    async with httpx.AsyncClient() as client:
        response = await client.get(
            "https://www.googleapis.com/oauth2/v2/userinfo",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.text}")
            return None

        user_info = response.json()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}")
        return user_info

async def authenticate_google_user(db: Session, code: str) -> Optional[Dict[str, Any]]:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Google OAuth"""
    print(f"üîπ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {code}")

    if not code:
        print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π!")
        return None

    try:
        # –ü–æ–ª—É—á–∞–µ–º Google OAuth —Ç–æ–∫–µ–Ω
        token_data = await get_google_token(code)
        if not token_data:
            return None

        access_token = token_data["access_token"]
        user_info = await get_google_user_info(access_token)

        if not user_info:
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        db_user = get_user_by_email(db, email=user_info["email"])

        if not db_user:
            print(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info['email']}")
            db_user = create_or_update_google_user(
                db,
                email=user_info["email"],
                name=user_info.get("name", user_info["email"].split("@")[0]),
                first_name=user_info.get("given_name"),
                last_name=user_info.get("family_name")
            )
        else:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_info['email']}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
        jwt_token = create_access_token(
            subject=db_user.id,
            expires_delta=access_token_expires
        )

        print(f"‚úÖ JWT Token —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user.email}")
        return {
            "access_token": jwt_token,
            "token_type": "bearer",
            "user": db_user
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google: {e}")
        return None




async def authenticate_google_user_with_credential(db: Session, credential: str) -> Optional[Dict[str, Any]]:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Google ID token"""
    print(f"üîπ –ü–æ–ª—É—á–µ–Ω Google ID token (credential)")
    
    if not credential:
        print("‚ùå –û—à–∏–±–∫–∞: ID token –ø—É—Å—Ç–æ–π!")
        return None
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
        # –≠—Ç–æ –Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤ –æ—Ç–ª–∞–¥–∫–µ
        header_payload = credential.split('.')[:2]
        payload_base64 = header_payload[1]
        # –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        padding = '=' * (4 - len(payload_base64) % 4) if len(payload_base64) % 4 != 0 else ''
        payload_base64 += padding
        
        # –ó–∞–º–µ–Ω—è–µ–º URL-safe —Å–∏–º–≤–æ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ –¥–ª—è base64
        payload_base64 = payload_base64.replace('-', '+').replace('_', '/')
        try:
            payload_json = base64.b64decode(payload_base64).decode('utf-8')
            payload = json.loads(payload_json)
            print(f"üîπ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload: {payload}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
            user_info = {
                "email": payload.get("email"),
                "name": payload.get("name"),
                "given_name": payload.get("given_name"),
                "family_name": payload.get("family_name"),
                "picture": payload.get("picture")
            }
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ ID —Ç–æ–∫–µ–Ω–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Google Client Library –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:
            # id_info = id_token.verify_oauth2_token(
            #     credential, google_requests.Request(), settings.GOOGLE_CLIENT_ID
            # )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            db_user = get_user_by_email(db, email=user_info["email"])
            
            if not db_user:
                print(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info['email']}")
                db_user = create_or_update_google_user(
                    db,
                    email=user_info["email"],
                    name=user_info.get("name", user_info["email"].split("@")[0]),
                    first_name=user_info.get("given_name"),
                    last_name=user_info.get("family_name")
                )
            else:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_info['email']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
            jwt_token = create_access_token(
                subject=db_user.id,
                expires_delta=access_token_expires
            )
            
            print(f"‚úÖ JWT Token —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user.email}")
            return {
                "access_token": jwt_token,
                "token_type": "bearer",
                "user": db_user
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ payload: {e}")
            return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å ID token: {e}")
        return None